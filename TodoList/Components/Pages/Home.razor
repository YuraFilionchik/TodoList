@page "/"
@using Microsoft.AspNetCore.Components.QuickGrid
@using TodoList.Components.Pages.TodoItemPages
@inject NavigationManager NavigationManager
@inject TodoList.Data.ApplicationDbContext DB
@rendermode InteractiveServer



<div class="container-fluid">
    <div class="row">
        <div class="col-md-2 bg-light sidebar">
            <div class="list-group">
                <button class="list-group-item list-group-item-action" @onclick="(()=>selectedTag = string.Empty)">Show All</button>
                <br />
                <!-- Ваши опции фильтра -->
                @foreach(var t in Tags)
                {
                    if (!String.IsNullOrWhiteSpace(t)) {
                        <button class="list-group-item list-group-item-action" @onclick="(()=>selectedTag = t)">@t</button>
                    }
                }
                <br />
                Show deleted items:<InputCheckbox @bind-Value="DisplayDeletedItems"> </InputCheckbox>
                
            </div>
        </div>
        <div class="col-md-8  main-content">
            <main>
                <!-- Главная зона контента -->
                <PageTitle>Welcome</PageTitle>

                <h2 class="d-flex justify-content-center mb-4">Your ToDo list</h2>
                <Search @bind-Text="search" />
                <div class="d-flex justify-content-center mb-4">
                    <button class="myButton" @onclick="ShowModalAddNew">
                        New
                    </button>
                </div >
                
                <br />

                <CascadingValue Value="DisplayDeletedItems">
                    <Index @bind-itemgrid="itemgrid" searchText=@search selectedTag=@selectedTag/>
                </CascadingValue>
            </main>
        </div>
    </div>
</div>




@code {

    public bool DisplayDeletedItems { get; set; }

    public string search { get; set; } = string.Empty;

    [CascadingParameter] public IModalService BlazoredModal { get; set; } = default!;

    ViewItems itemgrid;
    public string selectedTag { get; set; } = string.Empty;

    IEnumerable<string> Tags{
        get
        {
            return DB.TodoItem
                    .AsEnumerable()
                    .SelectMany(item => SplitTags(item.Tags))
                    .Distinct();
        }
    }

    IEnumerable<string> SplitTags(string str)
    {
        return str.Split(',');
    }

    async Task ShowModalAddNew()
    {        
        var messageForm = BlazoredModal.Show<Additem>();
        var result = await messageForm.Result;
       // itemgrid.RefreshData();
    }

    public  void IndexDataChanged(string data)
    {
        if (data == "DeletedItem")
        {
            //Task.Delay(700);
            //StateHasChanged();
        }
    }
}
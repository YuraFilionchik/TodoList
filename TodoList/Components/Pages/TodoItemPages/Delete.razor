@page "/todoitems/delete"
@inject TodoList.Data.ApplicationDbContext DB
@using TodoList
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>TodoItem</h4>
    <hr />
    @if (todoitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@todoitem.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsDone</dt>
            <dd class="col-sm-10">@todoitem.IsDone</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@todoitem.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedDate</dt>
            <dd class="col-sm-10">@todoitem.CreatedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedDate</dt>
            <dd class="col-sm-10">@todoitem.UpdatedDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsDeleted</dt>
            <dd class="col-sm-10">@todoitem.IsDeleted</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DueDate</dt>
            <dd class="col-sm-10">@todoitem.DueDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Tags</dt>
            <dd class="col-sm-10">@todoitem.Tags</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Priority</dt>
            <dd class="col-sm-10">@todoitem.Priority</dd>
        </dl>
        <EditForm method="post" Model="todoitem" OnValidSubmit="DeleteTodoItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(todoitem is null)">Delete</button> |
            <a href="/todoitems">Back to List</a>
        </EditForm>
    }
</div>

@code {
    TodoItem? todoitem;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        todoitem = await DB.TodoItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (todoitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteTodoItem()
    {
        DB.TodoItem.Remove(todoitem!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/todoitems");
    }
}

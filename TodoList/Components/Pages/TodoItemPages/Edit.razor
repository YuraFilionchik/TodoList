@page "/TodoItems/edit"
@inject TodoList.Data.ApplicationDbContext DB
@using TodoList
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>TodoItem</h4>
<hr />
@if (TodoItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="TodoItem" OnValidSubmit="UpdateTodoItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="TodoItem.Id" value="@TodoItem.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="TodoItem.Title" class="form-control" />
                    <ValidationMessage For="() => TodoItem.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isdone" class="form-label">IsDone:</label>
                    <InputCheckbox id="isdone" @bind-Value="TodoItem.IsDone" class="form-check-input" />
                    <ValidationMessage For="() => TodoItem.IsDone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="TodoItem.Description" class="form-control" />
                    <ValidationMessage For="() => TodoItem.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createddate" class="form-label">CreatedDate:</label>
                    <InputDate id="createddate" @bind-Value="TodoItem.CreatedDate" class="form-control" />
                    <ValidationMessage For="() => TodoItem.CreatedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updateddate" class="form-label">UpdatedDate:</label>
                    <InputDate id="updateddate" @bind-Value="TodoItem.UpdatedDate" class="form-control" />
                    <ValidationMessage For="() => TodoItem.UpdatedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isdeleted" class="form-label">IsDeleted:</label>
                    <InputCheckbox id="isdeleted" @bind-Value="TodoItem.IsDeleted" class="form-check-input" />
                    <ValidationMessage For="() => TodoItem.IsDeleted" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="duedate" class="form-label">DueDate:</label>
                    <InputDate id="duedate" @bind-Value="TodoItem.DueDate" class="form-control" />
                    <ValidationMessage For="() => TodoItem.DueDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="tags" class="form-label">Tags:</label>
                    <InputText id="tags" @bind-Value="TodoItem.Tags" class="form-control" />
                    <ValidationMessage For="() => TodoItem.Tags" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="priority" class="form-label">Priority:</label>
                    <InputSelect id="priority" @bind-Value="TodoItem.Priority" class="form-control">
                        @foreach (PriorityType priority in Enum.GetValues(typeof(PriorityType)))
                        {
                            <option value="@priority">@priority.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => TodoItem.Priority" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/todoitems">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public TodoItem? TodoItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TodoItem ??= await DB.TodoItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (TodoItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateTodoItem()
    {
        DB.Attach(TodoItem!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TodoItemExists(TodoItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/todoitems");
    }

    bool TodoItemExists(int id)
    {
        return DB.TodoItem.Any(e => e.Id == id);
    }
}
